{
  "version": "https://jsonfeed.org/version/1",
  "title": "Code, data and ML",
  "home_page_url": "https://sami-badawi.github.io/",
  "feed_url": "https://sami-badawi.github.io/feed.json",
  "description": "I am writing about my experiences as a naval navel-gazer.",
  "author": {
    "name": "Sami Badawi",
    "url": "https:blog.samibadawi.com"
  },
  "items": [
    {
      "id": "https://sami-badawi.github.io/posts/language-pick-2023/",
      "url": "https://sami-badawi.github.io/posts/language-pick-2023/",
      "title": "Language Pick for 2023",
      "content_html": "<h1>Many languages are converging on a common feature set</h1>\n<p>I love languages and every language has some great features, but also some very annoying ones.\nPython and Scala were the first languages where I felt that the good parts overshadow the bad parts. They really improved my productivity.</p>\n<p>In 2023 most mainstream languages have adapted successful ideas from other languages. And they have all become pretty good.</p>\n<h1>Language I have used in early 2023</h1>\n<ul>\n<li>Bash</li>\n<li>Java</li>\n<li>Python</li>\n<li>Rust</li>\n<li>Scala</li>\n<li>TypeScript</li>\n</ul>\n<h2>Bourne shell</h2>\n<p>I have been using Bourne shell for writing scripts and cloud work.</p>\n<h2>Python</h2>\n<p>I have been using Python for doing ML / A.I. and for writing api.</p>\n<h2>Rust</h2>\n<p>I have been using Rust for serving PyTorch models.</p>\n<h2>Scala</h2>\n<p>I have been using Scala for writing data pipelines in Flink.</p>\n<h2>TypeScript</h2>\n<p>I think that TypeScript has the most powerful type system of all mainstream languages.\nBut last I used it, getting the tooling working was still too much work.</p>\n<p>Now both Deno and Bun.sh have TypeScript support out of the box.\nI have been using TypeScript for handling json and for doing a little front end work using Deno libraries.</p>\n<h1>Language I would like to use more</h1>\n<h2>C#</h2>\n<p>.NET is a great platform and C# is a great language, for GUI work this is my first choice.</p>\n<h2>Lean 4</h2>\n<p><a href=\"https://github.com/leanprover/lean4\">Lean 4</a> is a proof assistant and a Haskell-like functional programming language. It is based on dependent types and has a very powerful type system.</p>\n<p>Mathematicians are using Lean 4 to prove theorems.</p>\n<p>Lean 4 has fixed some of the warts in Haskell, and I think that the combination of theorem prover and a functional programming language could prove useful for A.I. applications.</p>\n<h2>Nim</h2>\n<p>I tried Nim last year and I was impressed. It looked a lot like Python and it was fast like C.\nHowever the library support is still limited. Nim shows that you do not have to choose between fast and simple.</p>\n<h2>Zig</h2>\n<p>Zig is a new generation of systems programming language. It is a lot like C, but with a much better type system.</p>\n<p>It is also a build system that you can compile C and C++ code with.\nYou write your build script in Zig and not in CMake, this gives it a lot of power.</p>\n<p>I tried the Ziglang game engine, <a href=\"https://machengine.org/\">Mach engine</a>. Mach Engine ships with several cross platform 2D and 3D demos, which compiled and ran in seconds.</p>\n<p>Getting 2D and 3D demos running in C++ took me many long weekends between learning and configuring CMake, vcpkg, GLFW, GLEW and OpenGL.</p>",
      "date_published": "2023-05-04T00:00:00Z"
    },
    {
      "id": "https://sami-badawi.github.io/posts/will-ai-think-logic-or-english/",
      "url": "https://sami-badawi.github.io/posts/will-ai-think-logic-or-english/",
      "title": "Will A.I. Think in Logic or English",
      "content_html": "<h1>Will A.I. Think in Logic or English</h1>\n<p>We have seen a lot of progress in A.I. during 2023. Every week something new has happened.</p>\n<p>ChatGPT is probably the most famous example. It is a chatbot that can talk about anything and generate code.</p>\n<p>I started studying A.I. during the symbolic A.I. era, and assumed that when A.I. started producing results it would eventually think in logic.\nChatGPT is a big black box consisting of billions of parameters. Trained on a huge corpus of text, by hiding a word and asking the model to predict the missing word. So the opposite of logic.</p>\n<p>While this is impressive it is hard to extract business value from this. I see two ways forward for LLMs in the near future.</p>\n<ul>\n<li>Return of Symbolic Logic</li>\n<li>Chat is All You Need</li>\n</ul>\n<h1>Return of Symbolic Logic</h1>\n<p>We find a way to translate the result from large language models into logic, say RDF, OWL or a knowledge graph.\nThis is a good medium for storing large amounts of knowledge in a form that you can query and reason about.</p>\n<h1>Chat is All You Need</h1>\n<p>It is also possible that LLMs will reinvent some rudimentary form of logic, and that you will just be able to ask it questions.</p>\n<p>This seems like a brittle way to represent larger amounts of knowledge. In that case we would have invented a weird new form of ad hoc intelligence, that knows how to chat but is hard to reason about or have confidence in.</p>",
      "date_published": "2023-05-03T00:00:00Z"
    },
    {
      "id": "https://sami-badawi.github.io/posts/language-pick-2019/",
      "url": "https://sami-badawi.github.io/posts/language-pick-2019/",
      "title": "Language Pick for 2019",
      "content_html": "<h1>I did not pick them they picked me</h1>\n<ul>\n<li>Bash</li>\n<li>Python</li>\n<li>Rust</li>\n<li>Scala</li>\n<li>Terraform</li>\n<li>TypeScript</li>\n</ul>\n<p>The <strong>Bourne shell</strong> was cutting edge in 1977, and it still is today. I have aesthetics issues with it, but it has found a new happy home in cloud computing.</p>\n<p><strong>Python</strong> and <strong>Scala</strong> will take you far in backend and data engineering.</p>\n<p>The gradual types in Python 3.6 and 3.7 are really a great help but they are very simple compared to TypeScript that probably has the most sophisticated type system these days.</p>\n<p><strong>Rust</strong> is beginning to make it into cloud infrastructure</p>\n<ul>\n<li>AWS Firecracker</li>\n<li>Fargate</li>\n<li>Google Fuchsia</li>\n</ul>\n<p>Rust also seems like a natural choice for working with WebAssembly.</p>\n<p><strong>Terraform</strong> feels like a strange combination of Haskell and TypeSafe config. But it also fills a niche in cloud computing for: Infrastructure as code.</p>\n<p><strong>TypeScript</strong> is a roubust JavaScript and unsurpassed at describing and processing complex syntactic relations using its type system.</p>",
      "date_published": "2019-02-25T00:00:00Z"
    },
    {
      "id": "https://sami-badawi.github.io/posts/language-evolution/",
      "url": "https://sami-badawi.github.io/posts/language-evolution/",
      "title": "Languages Evolution",
      "content_html": "<h1>Languages Evolution with Poetic License</h1>\n<p>Looking at language evolution over many years I lost count of how many times I fell in love with a new language and thought this was the ultimate language.</p>\n<p>Here are my initial impressions for some mainstream languages that I really liked:</p>\n<h2>C++</h2>\n<p>The one true programming language of the day.\nWith the awesome power of OOP.</p>\n<h2>Java</h2>\n<p>The untimate language to end all languages.\nIt had everything that was cool in 1994.</p>\n<h2>C#</h2>\n<p>The perfect language that cleaned up everything that went wrong in Java.</p>\n<h2>Perl</h2>\n<p>They lied to me!</p>\n<p>You don’t need design patterms and OOP.</p>\n<p>You can hack it out in 10 lines of Perl.</p>\n<h2>Python</h2>\n<p>Hey you don’t need to hack it out in 10 lines of Perl.\nYou can program it in 15 lines of Python.</p>\n<h2>Scala</h2>\n<p>Theoretical CS and type theory is not just for academia.\nA gem of a orthogonal, minimal constructs.\nSafe, elegant, fast and happy.</p>\n<h2>Haskell</h2>\n<p>Wow it is possible to program in mathematics. I did it! I scaled mount Haskell and took a snapshot and wrote a blog post.</p>\n<h2>TypeScript</h2>\n<p>You do not have to chose between type based language and dynamic data language.\nYou can have both.</p>\n<h2>Rust</h2>\n<p>At a low level the computer industry is build on a very insecure foundation.\nType theory can make lowlevel code very fast, safe and elegant.</p>",
      "date_published": "2019-02-24T00:00:00Z"
    }
  ]
}